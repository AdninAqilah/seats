import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';

class EditRestDetails extends StatefulWidget {
  const EditRestDetails({Key? key}) : super(key: key);

  @override
  State<EditRestDetails> createState() => _EditRestDetailsState();
}

class _EditRestDetailsState extends State<EditRestDetails> {
  bool monChecked = false;
  bool tueChecked = false;
  bool wedChecked = false;
  bool thuChecked = false;
  bool friChecked = false;
  bool satChecked = false;
  bool sunChecked = false;
  List<String> hours = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
  List<String> hours2 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
  String? selectedHour = '1';
  String? selectedHour2 = '1';
  List<String> minutes = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12',
    '13', '14', '15', '16', '17', '18', '19', '20',
    '21', '22', '23', '24', '25', '26', '27', '28', '29', '30',
    '31', '32', '33', '34', '35', '36', '37', '38', '39', '40',
    '41', '42', '43', '44', '45', '46', '47', '48', '49', '50',
    '51', '52', '53', '4', '55', '56', '57', '58', '59',];
  List<String> minutes2 = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12',
    '13', '14', '15', '16', '17', '18', '19', '20',
    '21', '22', '23', '24', '25', '26', '27', '28', '29', '30',
    '31', '32', '33', '34', '35', '36', '37', '38', '39', '40',
    '41', '42', '43', '44', '45', '46', '47', '48', '49', '50',
    '51', '52', '53', '4', '55', '56', '57', '58', '59',];
  String? selectedMinute = '00';
  String? selectedMinute2 = '00';
  List<String> ampm = ['AM', 'PM'];
  List<String> ampm2 = ['AM', 'PM'];
  String? selectedAmpm = 'AM';
  String? selectedAmpm2 = 'AM';

  @override
  Widget build(BuildContext context) {
    CollectionReference user = FirebaseFirestore.instance.collection('restaurants');
    String? uid = FirebaseAuth.instance.currentUser?.uid;

    //final nameController = TextEditingController(text: namefdb);
    
    return FutureBuilder<DocumentSnapshot>(
        future: user.doc(uid).get(),
        builder: (BuildContext context, AsyncSnapshot<DocumentSnapshot> snapshot){
          if (snapshot.hasError) {
            return Text("Something went wrong");
          }

          if (snapshot.hasData && !snapshot.data!.exists) {
            return Text("Document does not exist");
          }
          if (snapshot.connectionState == ConnectionState.done) {
            Map<String, dynamic> data = snapshot.data!.data() as Map<String, dynamic>;
            final nameController = TextEditingController(text: data['name']);
            monChecked = data['operatingDays'][0];
            tueChecked = data['operatingDays'][1];
            wedChecked = data['operatingDays'][2];
            thuChecked = data['operatingDays'][3];
            friChecked = data['operatingDays'][4];
            satChecked = data['operatingDays'][5];
            sunChecked = data['operatingDays'][6];

            return

     Container(
        padding: EdgeInsets.only(left: 32, right: 32),
        child: SingleChildScrollView(
            child: Column(
              children: <Widget>[
                SizedBox(
                  width: double.infinity,
                  child: Text(
                    'Name',
                    textAlign: TextAlign.left,
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.lightGreen[900]),
                  ),
                ),
                TextFormField(
                  controller: nameController,
                  decoration: InputDecoration(
                    border: OutlineInputBorder(),
                  ),
                ),
                SizedBox(
                  width: double.infinity,
                  height: 30,
                  child: Text(
                    'Operating Days',
                    textAlign: TextAlign.left,
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.lightGreen[900]),
                  ),
                ),
                CheckboxListTile(
                  controlAffinity: ListTileControlAffinity.leading,
                  title: Text('Mon'),
                    value: monChecked,
                    onChanged: (value) {
                      setState(() => monChecked = value!);
                    },
                activeColor: Colors.lightGreen[900],),
              CheckboxListTile(
                controlAffinity: ListTileControlAffinity.leading,
                title: Text('Tue'),
                value: tueChecked,
                onChanged: (value) {
                  setState(() => tueChecked = value!);
                },
                activeColor: Colors.lightGreen[900],),
              CheckboxListTile(
                  controlAffinity: ListTileControlAffinity.leading,
                  title: Text('Wed'),
                  value: wedChecked,
                  onChanged: (value) {
                    setState(() => wedChecked = value!);
                  },
                  activeColor: Colors.lightGreen[900],),
              CheckboxListTile(
                  controlAffinity: ListTileControlAffinity.leading,
                  title: Text('Thu'),
                  value: thuChecked,
                  onChanged: (value) {
                    setState(() => thuChecked = value!);
                  },
                  activeColor: Colors.lightGreen[900],),
                CheckboxListTile(
                  controlAffinity: ListTileControlAffinity.leading,
                  title: Text('Fri'),
                  value: friChecked,
                  onChanged: (value) {
                    setState(() => friChecked = value!);
                  },
                  activeColor: Colors.lightGreen[900],),
                CheckboxListTile(
                  controlAffinity: ListTileControlAffinity.leading,
                  title: Text('Sat'),
                  value: satChecked,
                  onChanged: (value) {
                    setState(() => satChecked = value!);
                  },
                  activeColor: Colors.lightGreen[900],),
                CheckboxListTile(
                  controlAffinity: ListTileControlAffinity.leading,
                  title: Text('Sun'),
                  value: sunChecked,
                  onChanged: (value) {
                    setState(() => sunChecked = value!);
                  },
                  activeColor: Colors.lightGreen[900],),
                SizedBox(
                  width: double.infinity,
                  height: 30,
                  child: Text(
                    'Operating Hours',
                    textAlign: TextAlign.left,
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.lightGreen[900]),
                  ),
                ),
              Row(
                children: <Widget>[
                  Expanded(child:
                  DropdownButton<String>(
                      value: selectedHour,
                      items: hours
                          .map((hours) => DropdownMenuItem<String>(
                          value: hours,
                          child: Text(hours,style: TextStyle(fontSize: 18),))).toList(),
                      onChanged: (hours) => setState(() => selectedHour = hours)),
                  ),
                  SizedBox(child: Text(':', style: TextStyle(fontWeight: FontWeight.bold),), width: 10,),
                  Expanded(child:
                  DropdownButton<String>(
                      value: selectedMinute,
                      items: minutes
                          .map((minutes) => DropdownMenuItem<String>(
                          value: minutes,
                          child: Text(minutes,style: TextStyle(fontSize: 18),))).toList(),
                      onChanged: (minutes) => setState(() => selectedMinute = minutes)),
                  ),
                  Expanded(child:
                  DropdownButton<String>(
                      value: selectedAmpm,
                      items: ampm
                          .map((ampm) => DropdownMenuItem<String>(
                          value: ampm,
                          child: Text(ampm,style: TextStyle(fontSize: 18),))).toList(),
                      onChanged: (ampm) => setState(() => selectedAmpm = ampm)),
                  ),
                ],
              ),
              Text('to', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.lightGreen[900]),),
                Row( // second row
                  children: <Widget>[
                    Expanded(child:
                    DropdownButton<String>(
                        value: selectedHour2,
                        items: hours2
                            .map((hours2) => DropdownMenuItem<String>(
                            value: hours2,
                            child: Text(hours2,style: TextStyle(fontSize: 18),))).toList(),
                        onChanged: (hours2) => setState(() => selectedHour2 = hours2)),
                    ),
                    SizedBox(child: Text(':', style: TextStyle(fontWeight: FontWeight.bold),), width: 10,),
                    Expanded(child:
                    DropdownButton<String>(
                        value: selectedMinute2,
                        items: minutes2
                            .map((minutes2) => DropdownMenuItem<String>(
                            value: minutes2,
                            child: Text(minutes2,style: TextStyle(fontSize: 18),))).toList(),
                        onChanged: (minutes2) => setState(() => selectedMinute2 = minutes2)),
                    ),
                    Expanded(child:
                    DropdownButton<String>(
                        value: selectedAmpm2,
                        items: ampm2
                            .map((ampm2) => DropdownMenuItem<String>(
                            value: ampm2,
                            child: Text(ampm2,style: TextStyle(fontSize: 18),))).toList(),
                        onChanged: (ampm2) => setState(() => selectedAmpm2 = ampm2)),
                    ),
                  ],
                ),
              ElevatedButton(
                    onPressed: () {
                      final user = User(
                        name : nameController.text,
                        operatingDays : [monChecked, tueChecked, wedChecked, thuChecked,
                        friChecked, satChecked, sunChecked],
                        operatingHours: [timeToDouble(selectedHour.toString(), selectedMinute.toString(), selectedAmpm.toString()), timeToDouble(selectedHour2.toString(), selectedMinute2.toString(), selectedAmpm2.toString())]
                      );

                      if (checkValidOT(selectedHour.toString(), selectedHour2.toString(), selectedMinute.toString(), selectedMinute2.toString(), selectedAmpm.toString(), selectedAmpm2.toString()))
                        updateDetails(user);
                      else showToast();
                    },
                    child: Text('Submit'))
              ],
            )
        )
    );
          }
          return Text("loading");
        }
    );
  }

  void showToast() => Fluttertoast.showToast(
    msg: "Please enter valid operating hours",
    fontSize: 18,
  );

  bool checkValidOT(String h, String h2, String m, String m2, String ap, String ap2){
    double open, close;
    open = timeToDouble(h, m, ap);
    close = timeToDouble(h2, m2, ap2);

    if (open < close)
      return true;
    else
      return false;

  }

  double timeToDouble (String h, String m, String ap){
    double time;

    if (ap == 'AM' && h != '12')
      time = double.parse(h);
    else if (ap == 'AM' && h == '12')
      time = 24;
    else if (ap == 'PM' && h != '12')
      time = double.parse(h)+12;
    else
      time = 12;

    return time + double.parse(m)/60;
  }

  /*Stream<List<User>> readUsers() => FirebaseFirestore.instance.collection('restaurants')
      .snapshots().
  map((snapshot) =>
      snapshot.docs.map((doc) => User.fromJson(doc.data())).toList());*/

  Future updateDetails(User user) async {
    var currentUser = FirebaseAuth.instance.currentUser;
    final docUser = FirebaseFirestore.instance.collection('restaurants').doc(currentUser?.uid);

    final json = user.toJson();

    try{
      await docUser.set(json);
    }catch(e){
      print(e);
    }
  }
}

class User {
  final String name;
  final List<bool> operatingDays;
  final List<double> operatingHours;

  User(
  {
    required this.name,
    required this.operatingDays,
    required this.operatingHours
  }
      );

  Map<String, dynamic> toJson() => {
    'name': name,
    'operatingDays': operatingDays,
    'operatingHours': operatingHours
  };

  /*static User fromJson(Map<String, dynamic> json) => User(
      name: json['name'],
    operatingDays: json['operatingDays'],
    operatingHours: json['operatingHours']
      );*/
}
