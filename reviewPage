import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

class ReviewPage extends StatefulWidget {
  const ReviewPage({Key? key}) : super(key: key);

  @override
  State<ReviewPage> createState() => _ReviewPageState();
}

class _ReviewPageState extends State<ReviewPage> {
  int totalReviews = 0;
  bool end = false;
  List<String> reviewList = [];
  var items2 = [
    'All',
    '1★',
    '2★',
    '3★',
    '4★',
    '5★',
  ];
  String dropDownValue2 = 'All';

  Future getData() async{
    var currentUser = FirebaseAuth.instance.currentUser;
    var uid = currentUser?.uid;
    DatabaseReference ref2 = FirebaseDatabase.instance.ref("uids/$uid");
    DatabaseEvent event = await ref2.once();
    String restID = event.snapshot.value as String; //rest2
    DatabaseReference ref3 = FirebaseDatabase.instance.ref('$restID/reviews/totalReviews');
    DatabaseEvent event2 = await ref3.once();
    setState(()=> totalReviews = event2.snapshot.value as int);

    for(int i=0; i<totalReviews; i++){
      DatabaseReference ref4 = FirebaseDatabase.instance.ref('$restID/reviews/review$i');
      DatabaseEvent event4 = await ref4.once();
      setState(()=> reviewList.add(event4.snapshot.value as String));
    }
    setState(()=> end = true);
  }

  @override
  Widget build(BuildContext context) {
    if (!end){
      if(totalReviews==0) getData();
      return const CircularProgressIndicator();
    }
    else {
      return ListView.builder(
        itemCount: totalReviews,
        itemBuilder: (context, index){
          return Column(
            children: [
              if(index==0)
                Text('Sort', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.green[900],)),
              if(index==0)
                DropdownButton(
                  value: dropDownValue2,
                  icon: const Icon(Icons.keyboard_arrow_down),
                  items: items2.map((String items) {
                    return DropdownMenuItem(
                      value: items,
                      child: Text(items),
                    );
                  }).toList(),
                  onChanged: (String? newValue) {
                    setState(() {
                      dropDownValue2 = newValue!;
                    });
                  },
                ),
              if(dropDownValue2=="All" || reviewList[index].substring(reviewList[index].length-3,reviewList[index].length-1)==dropDownValue2)
              SizedBox(
                width: 280,
                child: Card(
                  shadowColor: Colors.amber,
                  color: Colors.amber[100],
                  elevation: 5,
                  child: Padding(
                    padding: const EdgeInsets.all(15),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          reviewList[index],
                          style: const TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
                        ),
                        const SizedBox(
                          height: 12,
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          );
        })
    ;
    }
  }
}
