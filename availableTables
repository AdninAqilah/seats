import 'dart:math';

import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:geolocator/geolocator.dart';

class AvailableTables extends StatefulWidget {
  const AvailableTables({Key? key}) : super(key: key);

  @override
  State<AvailableTables> createState() => _AvailableTablesState();
}



class _AvailableTablesState extends State<AvailableTables> {
  DatabaseReference ref = FirebaseDatabase.instance.ref("numOfRests");
  int numOfRests = 0;
  List<String> nameList = [];
  List<int> numOfTablesList = [];
  List<String> dishList = [];
  List<String> priceList = [];
  List<String> locations = [];
  bool end = false;
  bool selectRest = false;
  bool viewMenu = false;
  String selectedRest = "";
  String logoURL = "";
  int menuSize = 0;
  String menuString = "";
  bool menuOnce = false;
  bool viewQueue = false;
  final nOPController = TextEditingController();
  final phoneNoController = TextEditingController();
  final reviewController = TextEditingController();
  int totalTables = 0;
  String estTime = "";
  bool showTime = false;
  int noOfTablesAssigned = 0;
  int pax = 0;
  bool showQueueInfo = false;
  String queueString = "";
  bool queueOnce = false;
  Map status = {};
  double distance = 0;
  String restaurantName = "";
  bool tapReview = false;
  int totalReviews = 0;
  bool endReview = false;
  List<String> reviewList = [];
  bool fetchReviews = false;
  String dropDownValue = '5 â˜…';

  Future<void> toShowLogo() async {
    DatabaseReference ref = FirebaseDatabase.instance.ref("$selectedRest/logoURL");
    DatabaseEvent event = await ref.once();
    setState(() {
      logoURL = event.snapshot.value as String;
    });
  }

  Future getData() async{
    DatabaseEvent event = await ref.once();
    setState(()=> numOfRests = event.snapshot.value as int);

    for(int i=0; i<numOfRests; i++){
      DatabaseReference ref2 = FirebaseDatabase.instance.ref("rest$i/name");
      DatabaseReference ref3 = FirebaseDatabase.instance.ref("rest$i/numOfTables");
      DatabaseReference ref4 = FirebaseDatabase.instance.ref("rest$i/operatingDays");
      DatabaseReference ref5 = FirebaseDatabase.instance.ref("rest$i/openTime");
      DatabaseReference ref6 = FirebaseDatabase.instance.ref("rest$i/closeTime");
      DatabaseReference ref7 = FirebaseDatabase.instance.ref("rest$i/location");
      DatabaseEvent event2 = await ref2.once();
      DatabaseEvent event3 = await ref3.once();
      DatabaseEvent event4 = await ref4.once();
      DatabaseEvent event5 = await ref5.once();
      DatabaseEvent event6 = await ref6.once();
      DatabaseEvent event7 = await ref7.once();
      String s = event4.snapshot.value as String;
      String openTime = event5.snapshot.value as String;
      String closeTime = event6.snapshot.value as String;
      String location = event7.snapshot.value as String;
      await isNearby(location);
      if (distance>=15){
        setState(()=> status['rest$i'] = '');
        setState(()=> nameList.add(''));
        setState(()=> numOfTablesList.add(0));
      }
      else if (checkOpen(s, openTime, closeTime)) {
        setState(()=> status['rest$i'] = 'O');
        setState(()=> nameList.add(event2.snapshot.value as String));
        setState(()=> numOfTablesList.add(event3.snapshot.value as int));
      } else {
        setState(()=> status['rest$i'] = 'C');
        setState(()=> nameList.add("${event2.snapshot.value as String} (CLOSED)"));
        setState(()=> numOfTablesList.add(0));
      }
    }
    setState(()=> end = true);
  }

  Future isNearby(String s) async {
    double latC = 0;
    double longC = 0;
    await getCurrentLocation().then((value) {
      String C = '${value.latitude}';
      latC = double.parse(C);
      String D = '${value.longitude}';
      longC = double.parse(D);
    });

    s = s.substring(10);
    double latR = double.parse(s.split(', longitude: ')[0]);
    double longR = double.parse(s.split(', longitude: ')[1]);
    var p = 0.017453292519943295;
    var a = 0.5 - cos((latR - latC) * p)/2 +
        cos(latC * p) * cos(latR * p) *
            (1 - cos((longR - longC) * p))/2;
    var d = (12742 * asin(sqrt(a)));
    setState(()=> distance = d);
  }

  Future<Position> getCurrentLocation() async{
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if(!serviceEnabled){
      return Future.error('Location service is disabled');
    }
    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        return Future.error('Location permission is denied');
      }
    }

    if (permission == LocationPermission.deniedForever){
      return Future.error('Location permission is permanently denied');
    }

    return await Geolocator.getCurrentPosition();
  }

  bool checkOpen(String s, String openTime, String closeTime) {
    DateTime now = DateTime.now();
    DateTime malaysiaTime = now.add(const Duration(hours: 8));
    int d = malaysiaTime.weekday;
    int openHour = 0;
    int closeHour = 0;
    int currentHour = malaysiaTime.hour;
    int openMinute = 0;
    int closeMinute = 0;
    int currentMinute = malaysiaTime.minute;
    if (s[d-1]=="C") {
      return false; //it's closed
    } else { //it opened that day, but out of operating hours //800AM //1130PM
      List openTimeList = [openTime.substring(0, openTime.length - 4),openTime.substring(openTime.length - 4, openTime.length - 2), openTime.substring(openTime.length - 2)];
      List closeTimeList = [closeTime.substring(0, closeTime.length - 4),closeTime.substring(closeTime.length - 4, closeTime.length - 2), closeTime.substring(closeTime.length - 2)];

      //convert open time to 24 hours
      if (openTimeList[2]=="PM"&&openTimeList[0]!="12") {
        openHour = int.parse(openTimeList[0]) + 12;
      } else if (openTimeList[2]=="AM"&&openTimeList[0]=="12"){
        openHour = 0;
      } else {
        openHour = int.parse(openTimeList[0]);
      }

      //convert close time to 24 hours
      if (closeTimeList[2]=="PM"&&closeTimeList[0]!="12") {
        closeHour = int.parse(closeTimeList[0]) + 12;
      } else if (closeTimeList[2]=="AM"&&closeTimeList[0]=="12"){
        closeHour = 0;
      } else {
        closeHour = int.parse(closeTimeList[0]);
      }

      openMinute = int.parse(openTimeList[1]);
      closeMinute = int.parse(closeTimeList[1]);

      double currentTime = currentHour + currentMinute/60;
      double openTimeDouble = openHour + openMinute/60;
      double closeTimeDouble = closeHour + closeMinute/60;

      if (currentTime<openTimeDouble||currentTime>=closeTimeDouble){
        return false;
      }
    }
    return true; //it is opened
  }

  Future getMenu() async{
    if (menuOnce) {
      setState(()=> viewMenu = !viewMenu);
      return;
    }
    setState(()=> menuOnce = !menuOnce);
    DatabaseReference ref4 = FirebaseDatabase.instance.ref("$selectedRest/menuSize");
    DatabaseEvent event = await ref4.once();
    setState(()=> menuSize = event.snapshot.value as int);

    for(int i=0; i<menuSize; i++){
      DatabaseReference ref2 = FirebaseDatabase.instance.ref("$selectedRest/dishes/dish$i");
      DatabaseReference ref3 = FirebaseDatabase.instance.ref("$selectedRest/prices/price$i");
      DatabaseEvent event2 = await ref2.once();
      DatabaseEvent event3 = await ref3.once();
      String dish = event2.snapshot.value as String;
      String price = event3.snapshot.value as String;
      setState(()=> dishList.add(event2.snapshot.value as String));
      setState(()=> priceList.add(event3.snapshot.value as String));
      setState(() {
        menuString = "$menuString$dish : RM$price\n";
      });
    }
    setState(()=> viewMenu = !viewMenu);
  }

  Future addQueue() async{
    setState(()=> viewQueue = !viewQueue);
  }

  Future calculateEstTime() async{
    if (!isNumeric(nOPController.text)){
      showToast();
      return;
    }
    setState(()=> pax = int.parse(nOPController.text));
    if (pax==0) {
      showToast2();
      return;
    }

    DatabaseReference ref4 = FirebaseDatabase.instance.ref("$selectedRest/totalTables");
    DatabaseEvent event = await ref4.once();
    setState(()=> totalTables = event.snapshot.value as int);
    if(pax>totalTables*4) {
      showToast3();
      return;
    }
    int waitTime = 0;
    int clearTime = 0;
    int minTime = 100;
    List<int> times = []; //testing
    //dont delete
    for(int i=1; i<=totalTables; i++){
      DatabaseReference ref2 = FirebaseDatabase.instance.ref("$selectedRest/Table/Table $i/waitTime");
      DatabaseReference ref3 = FirebaseDatabase.instance.ref("$selectedRest/Table/Table $i/clearTime");
      DatabaseEvent event2 = await ref2.once();
      DatabaseEvent event3 = await ref3.once();
      waitTime = event2.snapshot.value as int;
      clearTime = event3.snapshot.value as int;
      if(clearTime!=0){
        times.add(clearTime);
      }else if(waitTime!=0){
        times.add(waitTime + 5);
      }else {
        times.add(waitTime);
      }
    }
    times.sort();
    print(times);

    DatabaseReference ref5 = FirebaseDatabase.instance.ref("$selectedRest/Queues/totalQueues");
    DatabaseEvent event5 = await ref5.once();
    int totalQueues = event5.snapshot.value as int;
    int totalTablesReserved = 0;

    for(int j=totalQueues-1;j>=0;j--){
      DatabaseReference ref4 = FirebaseDatabase.instance.ref("$selectedRest/Queues/queue$j/noOfTablesNeeded");
      DatabaseEvent event4 = await ref4.once();
      if(!event4.snapshot.exists) continue;
      totalTablesReserved = totalTablesReserved + (event4.snapshot.value as int);
    }

    setState(()=> noOfTablesAssigned = (pax/4).ceil());
    try {
      minTime = times.elementAt(noOfTablesAssigned-1+totalTablesReserved);
    } catch (e) {
      int i = noOfTablesAssigned - (times.length - totalTablesReserved);
      minTime = times.elementAt(i- 1) + 55*(i/times.length).ceil();
    }

    DateTime now = DateTime.now();
    int hour = now.hour + 8;
    int minute = now.minute;
    if(hour>=24) hour = hour - 24;
    minute = minute + minTime;
    if (minute>=60) {
      hour = hour + (minute/60).floor();
      minute = minute - 60*(minute/60).floor();
    }
    String ampm="";
    if(hour>=0&&hour<=11) {
      ampm = "am";
    } else {
      ampm = "pm";
    }
    if(hour==0){
      hour = 12;
    } else if (hour>=13&&hour<24){
      hour = hour - 12;
    }

    if(minute<10){
      setState(()=> estTime = "$hour:0$minute $ampm");
    }else {
      setState(()=> estTime = "$hour:$minute $ampm");
    }
    setState(()=> showTime = true);
    //print("$hour:$minute $ampm");
  }

  bool isNumeric(String s) {
    return int.tryParse(s) != null;
  }

  void showToast() => Fluttertoast.showToast(
    msg: "Please enter a number",
    fontSize: 18,
  );

  void showToast2() => Fluttertoast.showToast(
    msg: "Please enter number more than 0",
    fontSize: 18,
  );

  void showToast3() => Fluttertoast.showToast(
    msg: "Not enough tables! Please contact the restaurant for inquiries",
    fontSize: 18,
  );

  void showToast4() => Fluttertoast.showToast(
    msg: "Queue is successfully cancelled",
    fontSize: 18,
  );

  Future submitQueue() async{
    await calculateEstTime();
    DatabaseReference ref = FirebaseDatabase.instance.ref("$selectedRest/Queues/totalQueues");
    DatabaseEvent event = await ref.once();
    int totalQueues = event.snapshot.value as int;

    DatabaseReference ref2 = FirebaseDatabase.instance.ref("$selectedRest/Queues");
    await ref2.update({
      "queue$totalQueues" : {
        "queueID" : (totalQueues+1),
        "phoneNo" : phoneNoController.text,
        "noOfPax" : pax,
        "noOfTablesNeeded": noOfTablesAssigned,
        "estimatedTime": estTime
      },
      "totalQueues" : totalQueues+1
    });
    DatabaseReference ref3 = FirebaseDatabase.instance.ref("customersUids");
    var currentUser = FirebaseAuth.instance.currentUser;
    var uid = currentUser?.uid;
    await ref3.update({
      "$uid": {
        selectedRest: "queue$totalQueues",
      }
    });

    getQueueInfo();
  }

  Future getQueueInfo() async{
    if (queueOnce) return;
    var currentUser = FirebaseAuth.instance.currentUser;
    var uid = currentUser?.uid;
    DatabaseReference ref = FirebaseDatabase.instance.ref("customersUids/$uid/$selectedRest");
    DatabaseEvent event = await ref.once();
    if(!event.snapshot.exists) return; //takde restaurant tu

    String queueID = event.snapshot.value as String;
    if(queueID=="") return;
    setState(()=> viewQueue = false);

    DatabaseReference ref2 = FirebaseDatabase.instance.ref("$selectedRest/Queues/$queueID/phoneNo");
    DatabaseEvent event2 = await ref2.once();
    String s2 = event2.snapshot.value as String;
    if (s2=="") return;

    String s = (int.parse(queueID[queueID.length - 1]) + 1).toString();
    setState(()=> queueString = "${queueString}Queue ID : $s\n");


    setState(()=> queueString = "${queueString}Phone No : $s2\n");

    DatabaseReference ref3 = FirebaseDatabase.instance.ref("$selectedRest/Queues/$queueID/noOfPax");
    DatabaseEvent event3 = await ref3.once();
    s = (event3.snapshot.value as int).toString();
    setState(()=> queueString = "${queueString}No of Pax : $s\n");

    DatabaseReference ref4 = FirebaseDatabase.instance.ref("$selectedRest/Queues/$queueID/estimatedTime");
    DatabaseEvent event4 = await ref4.once();
    s = event4.snapshot.value as String;
    setState(()=> queueString = "${queueString}Estimated Time : $s\n");
    setState(()=> showQueueInfo = true);
    setState(()=> queueOnce = true);
}

  Future cancelQueue() async{
    var currentUser = FirebaseAuth.instance.currentUser;
    var uid = currentUser?.uid;
    DatabaseReference ref = FirebaseDatabase.instance.ref("customersUids/$uid/$selectedRest");
    DatabaseEvent event = await ref.once();
    String queueID = event.snapshot.value as String;
    DatabaseReference ref2 = FirebaseDatabase.instance.ref("$selectedRest/Queues/$queueID");
    await ref2.update({
      'estimatedTime': "",
      'noOfPax': 0,
      'noOfTablesNeeded': 0,
      'phoneNo': "",
      'queueID': ""
    });
    DatabaseReference ref3 = FirebaseDatabase.instance.ref("customersUids/$uid");
    await ref3.update({
      selectedRest: ""
    }
    );
    showToast4();
    setState(()=> showQueueInfo = false);
    setState(()=> viewQueue = true);
    setState(()=> queueString = "");
    setState(()=> queueOnce = false);
    recalculateTime();
  }

  Future recalculateTime() async{
    DatabaseReference ref = FirebaseDatabase.instance.ref("$selectedRest/Queues/totalQueues");
    DatabaseEvent event = await ref.once();
    int totalQueues = event.snapshot.value as int;

    int waitTime = 0;
    int clearTime = 0;
    int minTime = 100;
    List<int> times = []; //testing
    //dont delete
    for(int i=1; i<=totalTables; i++){
      DatabaseReference ref2 = FirebaseDatabase.instance.ref("$selectedRest/Table/Table $i/waitTime");
      DatabaseReference ref3 = FirebaseDatabase.instance.ref("$selectedRest/Table/Table $i/clearTime");
      DatabaseEvent event2 = await ref2.once();
      DatabaseEvent event3 = await ref3.once();
      waitTime = event2.snapshot.value as int;
      clearTime = event3.snapshot.value as int;
      if(clearTime!=0){
        times.add(clearTime);
      }else if(waitTime!=0){
        times.add(waitTime + 5);
      }else {
        times.add(waitTime);
      }
    }
    times.sort();
    print(times);
    int totalTablesAssigned = 0;
    for(int i=0; i<totalQueues;i++){
      DatabaseReference ref2 = FirebaseDatabase.instance.ref("$selectedRest/Queues/queue$i/noOfTablesNeeded");
      DatabaseEvent event2 = await ref2.once();
      int noOfTablesAssigned = event2.snapshot.value as int; //2
      if(noOfTablesAssigned==0) continue;
      try {
        minTime = times.elementAt(noOfTablesAssigned-1+totalTablesAssigned);
      } catch (e) {
        int i = noOfTablesAssigned - (times.length - totalTablesAssigned);
        minTime = times.elementAt(i- 1) + 55*(i/times.length).ceil();
      }

      DateTime now = DateTime.now();
      int hour = now.hour + 8;
      int minute = now.minute;
      if(hour>=24) hour = hour - 24;
      minute = minute + minTime;
      if (minute>=60) {
        hour = hour + (minute/60).floor();
        minute = minute - 60*(minute/60).floor();
      }
      String ampm="";
      if(hour>=0&&hour<=11) {
        ampm = "am";
      } else {
        ampm = "pm";
      }

      if(hour==0){
        hour = 12;
      } else if (hour>=13&&hour<24){
        hour = hour - 12;
      }
      DatabaseReference ref3 = FirebaseDatabase.instance.ref("$selectedRest/Queues/queue$i");
      if(minute<10){
        await ref3.update({
          'estimatedTime': "$hour:0$minute $ampm"
        });
      }else {
        await ref3.update({
          'estimatedTime': "$hour:$minute $ampm"
        });
      }
      totalTablesAssigned = totalTablesAssigned + noOfTablesAssigned;
    } //end of for loop
  }

  Future submitReview() async{
    DatabaseReference ref = FirebaseDatabase.instance.ref('$selectedRest/reviews/totalReviews');
    DatabaseEvent event = await ref.once();
    int totalReviews = event.snapshot.value as int;
    print(totalReviews);
    DatabaseReference ref2 = FirebaseDatabase.instance.ref("$selectedRest/reviews");
    await ref2.update({
      'review$totalReviews' : reviewController.text,
      'totalReviews': totalReviews+1
    });
    reviewController.clear();
  }

  Future viewReviews() async{
    setState(()=> fetchReviews = true);
    DatabaseReference ref3 = FirebaseDatabase.instance.ref('$selectedRest/reviews/totalReviews');
    DatabaseEvent event2 = await ref3.once();
    setState(()=> totalReviews = event2.snapshot.value as int);
    print(totalReviews);
    for(int i=0; i<totalReviews; i++){
      DatabaseReference ref4 = FirebaseDatabase.instance.ref('$selectedRest/reviews/review$i');
      DatabaseEvent event4 = await ref4.once();
      setState(()=> reviewList.add(event4.snapshot.value as String));
    }
    setState(()=> endReview = true);
    setState(()=> fetchReviews = false);
  }

  @override
  Widget build(BuildContext context) {
    if (selectRest) {
      if(logoURL==""||fetchReviews) {
        return const CircularProgressIndicator();
      }
      else if(endReview){
        return ListView.builder(
                  itemCount: totalReviews,
                  itemBuilder: (context, index){
                    return Column(
                      children: [
                        if(index==0)
                          ElevatedButton(onPressed: (){setState(()=> endReview = false);}, child: const Text("Back")),
                        SizedBox(
                          width: 280,
                          child: Card(
                            shadowColor: Colors.amber,
                            color: Colors.amber[700],
                            elevation: 5,
                            child: Padding(
                              padding: const EdgeInsets.all(15),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    reviewList[index],
                                    style: const TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
                                  ),
                                  const SizedBox(
                                    height: 12,
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                      ],
                    );
                  });
      }
      else {
        return SingleChildScrollView(
          child: Column(
          children: [
            Card(
              shadowColor: Colors.amber,
              color: Colors.amber[700],
              child: Padding(
                padding: const EdgeInsets.all(15),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      restaurantName,
                      style: const TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
                    ),
                  ],
                ),
              ),
            ),
            Image.network(logoURL, width: 160, height: 160,),
            ElevatedButton(onPressed: (){getMenu();}, child: const Text("Menu")),
            if (viewMenu) Card (
                shadowColor: Colors.amber,
                color: Colors.amber[700],
                elevation: 5,
              child: Text(menuString, style: const TextStyle(fontSize: 15, fontWeight: FontWeight.bold),)
            ),
            if(status[selectedRest]=='O')
            ElevatedButton(onPressed: (){getQueueInfo(); addQueue();
              if(showTime) setState(()=> showTime = !showTime);
              }, child: const Text("Queue")),
            if (viewQueue&&queueString=="")
              SizedBox(
                width: 250.0,
                child: TextFormField(
                  controller: nOPController,
                  decoration: const InputDecoration(
                    hintText: 'Enter no. of pax eg: 4, 6',
                    border: OutlineInputBorder(),
                  ),
                ),
              ),
            if (viewQueue&&queueString=="")
              SizedBox(
                width: 250.0,
                child: TextFormField(
                  controller: phoneNoController,
                  decoration: const InputDecoration(
                    hintText: 'Enter phone no.',
                    border: OutlineInputBorder(),
                  ),
                ),
              ),
            if (viewQueue&&queueString=="")
            ElevatedButton(onPressed: (){calculateEstTime();},
                style: ElevatedButton.styleFrom(
                  primary: Colors.green,
                ), child: const Text("Show estimated time")),
            if (showTime)
              Text(estTime),
            if (viewQueue&&queueString=="")
              ElevatedButton(onPressed: (){submitQueue();},
                style: ElevatedButton.styleFrom(
                  primary: Colors.green,
                ), child: const Text("Submit Queue"),),
            if (showQueueInfo&&viewQueue)
              Card (
                  shadowColor: Colors.amber,
                  color: Colors.amber[700],
                  elevation: 5,
                  child: Text(queueString, style: const TextStyle(fontSize: 15, fontWeight: FontWeight.bold),)
              ),
            if (showQueueInfo&&viewQueue)
              ElevatedButton(onPressed: (){cancelQueue();},
                style: ElevatedButton.styleFrom(
                  primary: Colors.green,
                ), child: const Text("Cancel queue"),),
            ElevatedButton(onPressed: (){setState(()=> tapReview = !tapReview);}, child: const Text("Reviews")),
            if (tapReview)
            ElevatedButton(onPressed: (){viewReviews();},
                style: ElevatedButton.styleFrom(
                  primary: Colors.green,
                ),
                child: const Text("View reviews")),
            if (tapReview)
              SizedBox(
                  height: 250,
                  width: 350,
                  child: TextFormField(
                    controller: reviewController,
                    decoration: const InputDecoration(
                      hintText: 'Enter Review...',
                      border: OutlineInputBorder(),
                      //contentPadding: EdgeInsets.symmetric(vertical: 18.0,horizontal: 150.0),
                    ),
                    maxLines: 8,
                  )
              ),
            if (tapReview)

            if (tapReview)
            ElevatedButton(onPressed: (){submitReview();},
              style: ElevatedButton.styleFrom(
                primary: Colors.green,
              ), child: const Text("Submit Review"),),
            ElevatedButton(onPressed: (){setState(()=> selectRest = false);},
              style: ElevatedButton.styleFrom(
                primary: Colors.blue,
              ), child: const Text("Back"),),
          ],
      ),
        );
      }
    } else
    if (!end) {
      if(numOfRests==0) getData();
      return const CircularProgressIndicator();
    } else {
      return ListView.builder(
          itemCount: numOfRests,
          itemBuilder: (context, index){
            return Row(
                children: <Widget>[
                  if(nameList[index]!="")
                ElevatedButton(
                onPressed: (){
                  setState(() {
                    selectedRest = "rest$index";
                  });
                  toShowLogo();
                  setState(()=> restaurantName = nameList[index]);
                    setState(() {
                    selectRest = true;
                  });
                },
            style: ElevatedButton.styleFrom(fixedSize: const Size(280, 50)),
            child: Text(nameList[index]),
            ),
                  if(nameList[index]!="")
            Text(numOfTablesList[index].toString()),
                  if(nameList[index]!="")
            const Icon(Icons.table_bar),
            ]
            );
          }
      );
    }
  }
}
