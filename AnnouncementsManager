import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';

class AnnouncementsManager extends StatefulWidget {
  const AnnouncementsManager({Key? key}) : super(key: key);

  @override
  State<AnnouncementsManager> createState() => _AnnouncementsManagerState();
}

class _AnnouncementsManagerState extends State<AnnouncementsManager> {
  final textController = TextEditingController();
  DateTime dateFrom = DateTime(2000, 1, 1);
  DateTime dateUntil = DateTime(2000, 1, 1);
  bool showList = false;

  void toViewList() {
    setState(() {
      showList = true;
    });
  }

  String getText(){
    if (dateFrom == DateTime(2000, 1, 1)) {
      return 'Select Date';
    }
    else{
      return '${dateFrom.day}/${dateFrom.month}/${dateFrom.year}';
    }
  }

  String getText2(){
    if (dateUntil == DateTime(2000, 1, 1)) {
      return 'Select Date';
    }
    else{
      return '${dateUntil.day}/${dateUntil.month}/${dateUntil.year}';
    }
  }

  @override
  Widget build(BuildContext context) {
    if (!showList) {
      return SingleChildScrollView(
      child: Column(
        children: <Widget>[
          const SizedBox(
            height: 30,
          ),
          SizedBox(
            height: 250,
            width: 350,
            child: TextFormField(
              controller: textController,
              decoration: const InputDecoration(
                hintText: 'Enter announcement...',
                border: OutlineInputBorder(),
                //contentPadding: EdgeInsets.symmetric(vertical: 18.0,horizontal: 150.0),
              ),
              maxLines: 8,
            )
          ),
          SizedBox(
            width: double.infinity,
            child: Text(
              'Post from...',
              textAlign: TextAlign.left,
              style: TextStyle(
                  fontSize: 18, color: Colors.lightGreen[900]),
            ),
          ),
          ElevatedButton(
              onPressed: () => pickDateFrom(context),
              child: Text(getText())),
          SizedBox(
            width: double.infinity,
            child: Text(
              'Post until...',
              textAlign: TextAlign.left,
              style: TextStyle(
                  fontSize: 18, color: Colors.lightGreen[900]),
            ),
          ),
          ElevatedButton(
              onPressed: () => pickDateUntil(context),
              child: Text(getText2())),
          ElevatedButton(
              onPressed: addPostToDB,
              child: const Text('Submit')),
          ElevatedButton(
              onPressed: toViewList,
              child: const Text('View Announcements')),
        ],
      ),
    );
    } else {
      return const ShowAnnouncementsList();
    }
  }

  Future pickDateFrom(BuildContext context) async {
    final initialDate = DateTime.now();
    final newDate = await showDatePicker(
        context: context,
        initialDate: initialDate,
        firstDate: DateTime.now(),
        lastDate: DateTime(DateTime.now().year + 1));

    if (newDate == null) return;

    setState(() => dateFrom = newDate);
  }

  Future pickDateUntil(BuildContext context) async {
    final initialDate = DateTime.now();
    final newDate = await showDatePicker(
        context: context,
        initialDate: initialDate,
        firstDate: DateTime.now(),
        lastDate: DateTime(DateTime.now().year + 1));

    if (newDate == null) return;

    setState(() => dateUntil = newDate);
  }

  Future addPostToDB() async {
    var currentUser = FirebaseAuth.instance.currentUser;
    final docUser = FirebaseFirestore.instance.collection('restaurants').doc(
        currentUser?.uid);
    final annDoc = FirebaseFirestore.instance.collection('restaurants').doc('announcements');
    DateTime currentTime = DateTime.now();
    final date = DateTime.utc(2022, 9, 9);
    final difference = currentTime.difference(date).inMinutes;

    String getName(){
      String name = "none";
      FutureBuilder<DocumentSnapshot>(
        future: docUser.get(),
        builder:
            (BuildContext context, AsyncSnapshot<DocumentSnapshot> snapshot) {

          if (snapshot.hasError) {
            return Text("Something went wrong");
          }

          if (snapshot.hasData && !snapshot.data!.exists) {
            return Text("Document does not exist");
          }

          if (snapshot.connectionState == ConnectionState.done) {
            Map<String, dynamic> data = snapshot.data!.data() as Map<String, dynamic>;
            name = data['name'];
            print(data['name']);
            print("hello");
            //return Text("Full Name: ${data['full_name']} ${data['last_name']}");
          }

          return Text("loading");
        },
      );

      return name;
    }

    if(textController.text == "" || dateUntil == DateTime(2000, 1, 1) || dateFrom == DateTime(2000, 1, 1) ||
    dateUntil.isBefore(dateFrom)){
      showToast();
    }
    else{
      docUser.update(
          {
            'announcement$difference' : [textController.text, dateFrom, dateUntil],
            'annNum': FieldValue.arrayUnion([difference])
          }
      );
      annDoc.update(
        {
          'annID': FieldValue.arrayUnion(['${currentUser?.uid}$difference']),
          '${currentUser?.uid}$difference': [currentUser?.uid, textController.text, dateFrom, dateUntil]
        }
      );
      showToastSubmitted();
      print(getName());
    }
  }

  void showToast() => Fluttertoast.showToast(
    msg: "Announcement/dates can't be empty",
    fontSize: 18,
  );

  void showToastSubmitted() => Fluttertoast.showToast(
    msg: "Announcement submitted",
    fontSize: 18,
  );
}

class ShowAnnouncementsList extends StatelessWidget {
  const ShowAnnouncementsList({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    String? uid = FirebaseAuth.instance.currentUser?.uid;
    CollectionReference user = FirebaseFirestore.instance.collection(
        'restaurants');
    var docUser = user.doc(uid);

    return FutureBuilder<DocumentSnapshot>(
        future: docUser.get(),
        builder: (BuildContext context,
            AsyncSnapshot<DocumentSnapshot> snapshot){
          if (snapshot.hasError) {
            return const Text("Something went wrong");
          }
          if (snapshot.hasData && !snapshot.data!.exists) {
            return const Text("Document does not exist");
          }
          if (snapshot.connectionState == ConnectionState.done) {
            Map<String, dynamic> data = snapshot.data!.data() as Map<String,
                dynamic>;
            int arrLength = data['annNum'].length;
//
            return ListView.builder(
                  itemCount: arrLength,
                  itemBuilder: (context, index){
                    return Card(
                      shadowColor: Colors.amber,
                      color: Colors.amber[700],
                      elevation: 5,
                      child: Padding(
                        padding: const EdgeInsets.all(15),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              '${data['announcement${data['annNum'][index]}'][0]}',
                              style: const TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
                            ), //${data['announcement${data['annNum'][index]}'][0]}
                            const SizedBox(
                              height: 12,
                            ),
                            Text(
                              'Post from ${data['announcement${data['annNum'][index]}'][1].toDate()} to ${data['announcement${data['annNum'][index]}'][2].toDate()}',
                              style: const TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
                            ),
                          ],
                        ),
                      ),
                    );
                  }
              )
            ;
          }
          return const Text("loading");
        }
    );
  }
}

